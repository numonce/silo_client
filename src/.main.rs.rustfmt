use clap::{Arg, Command};
use crossterm::event::{read, Event, KeyModifiers};
use crossterm::ExecutableCommand;
use serde::{Deserialize, Serialize};
use serde_json::error::Error;
use std::io::{BufRead, BufReader};
use std::net::TcpStream;
use tui::layout::Constraint::Percentage;
use tui::layout::{Alignment::Center, Direction, Layout};
use tui::style::Modifier;
use tui::style::{Color, Style};
use tui::text::{Span, Spans};
use tui::widgets::{BarChart, Block, Borders, Paragraph, Sparkline, Wrap};
use tui::{backend::CrosstermBackend, Terminal};
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Latency {
    time: Vec<u64>,
}
impl Latency {
    pub fn new(time: Vec<u64>) -> Self {
        Self { time }
    }
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Dam {
    water_level: u64,
    turbine_speed: u64,
    power: u64,
    sensor1: u64,
    sensor2: u64,
    sensor3: u64,
}
impl Dam {
    pub fn new(
        water_level: u64,
        turbine_speed: u64,
        power: u64,
        sensor1: u64,
        sensor2: u64,
        sensor3: u64,
    ) -> Self {
        Self {
            water_level,
            turbine_speed,
            power,
            sensor1,
            sensor2,
            sensor3,
        }
    }
}
#[derive(Serialize, Deserialize, Debug)]
pub struct Fuelsilo {
    pressure: u64,
    fuel_level: u64,
    temp: u64,
    sensor1: u64,
    sensor2: u64,
    sensor3: u64,
}
impl Fuelsilo {
    pub fn new(
        pressure: u64,
        fuel_level: u64,
        temp: u64,
        sensor1: u64,
        sensor2: u64,
        sensor3: u64,
    ) -> Self {
        Self {
            pressure,
            fuel_level,
            temp,
            sensor1,
            sensor2,
            sensor3,
        }
    }
}
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let app = Command::new("silo_client")
        .about("Client for monitoring ICS/SCADA devices generated by silo")
        .author("Brown")
        .version("0.0.1")
        .arg(
            Arg::new("server")
                .long("server")
                .short('s')
                .help("IP of the silo server. Ex: 127.0.0.1:1337")
                .required(true),
        )
        .get_matches();
    let mut stdout = std::io::stdout();
    stdout.execute(crossterm::terminal::Clear(
        crossterm::terminal::ClearType::All,
    ))?;
    let server = app.get_one::<String>("server").unwrap();
    let stream = TcpStream::connect(server)?;
    let conn = stream;
    //Vec for the sparklin
    // Turn on raw mode.
    crossterm::terminal::enable_raw_mode()?;
    // Clear screen
    loop {
        let mut buff = String::new();
        let mut something = BufReader::new(&conn);
        let result = something.read_line(&mut buff);
        match result {
            Ok(_) => handle_json(buff)?,
            Err(_) => break,
        };
        //break loop if q is pressed.
        let ctrl_c = crossterm::event::KeyCode::Char('c');
        let cquit = crossterm::event::KeyEvent::new(ctrl_c, KeyModifiers::CONTROL);
        let q = crossterm::event::KeyCode::Char('q');
        let quit = crossterm::event::KeyEvent::new(q, KeyModifiers::NONE);
        if crossterm::event::poll(std::time::Duration::from_millis(100))? {
            let keystroke = read()?;
            if keystroke == Event::Key(quit) || keystroke == Event::Key(cquit) {
                break;
            }
        }
    }

    crossterm::terminal::disable_raw_mode()?;
    Ok(())
}

fn handle_json(buff: String) -> Result<(), Box<dyn std::error::Error>> {
    //let message = String::from_utf8_lossy(&buff);
    let messages = buff.split_inclusive("}").collect::<Vec<_>>();
    if messages.len() != 4 {
        panic_fn();
    }
    let dam_result: Result<Dam, Error> = serde_json::from_str(&messages[1]);
    let dam = match dam_result {
        Ok(dam) => dam,
        Err(_) => panic_fn(),
    };
    let silo_result: Result<Fuelsilo, Error> = serde_json::from_str(&messages[0]);
    let silo = match silo_result {
        Ok(silo) => silo,
        Err(_) => panic_fn(),
    };
    let sparkline_data_result: Result<Latency, Error> = serde_json::from_str(&messages[2]);
    let sparkline_data = match sparkline_data_result {
        Ok(sparkline_data) => sparkline_data,
        Err(_) => panic_fn(),
    };
    handle_tui(dam, silo, sparkline_data)?;
    Ok(())
}
// Draw two boxes and populate them with a bar graph that uses the json recieved.
fn handle_tui(
    dam: Dam,
    silo: Fuelsilo,
    sparkline_data: Latency,
) -> Result<(), Box<dyn std::error::Error>> {
    let dam_data = [
        ("Water level", dam.water_level),
        ("Turbine speed", dam.turbine_speed),
        ("Power", dam.power),
        ("Sensor 1", dam.sensor1),
        ("Sensor 2", dam.sensor2),
        ("Sensor 3", dam.sensor3),
    ];
    let silo_data = [
        ("Pressure", silo.pressure),
        ("Fuel Level", silo.fuel_level),
        ("Temp", silo.temp),
        ("Sensor 1", silo.sensor1),
        ("Sensor 2", silo.sensor2),
        ("Sensor 3", silo.sensor3),
    ];
    let stdout = std::io::stdout();
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;
    let text = vec![Spans::from(Span::styled(
        "AUTHORIZED PERSONNEL ONLY.\n\n\n\n",
        Style::default()
            .fg(Color::Yellow)
            .add_modifier(Modifier::SLOW_BLINK),
    ))];
    let text2 = vec![    
    Spans::from(Span::styled("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Fringilla est ullamcorper eget nulla facilisi etiam. Velit aliquet sagittis id consectetur. Ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant morbi. Egestas integer eget aliquet nibh praesent tristique magna. Vitae tortor condimentum lacinia quis vel eros. Ornare arcu dui vivamus arcu felis. Ornare quam viverra orci sagittis eu volutpat odio facilisis mauris. Diam phasellus vestibulum lorem sed risus ultricies tristique. Vitae nunc sed velit dignissim sodales ut eu. Nisi vitae suscipit tellus mauris a diam maecenas sed enim. Elit ullamcorper dignissim cras tincidunt lobortis feugiat.

Condimentum mattis pellentesque id nibh tortor. Tincidunt arcu non sodales neque sodales ut etiam sit. Placerat in egestas erat imperdiet sed. Imperdiet proin fermentum leo vel orci. Lacus suspendisse faucibus interdum posuere lorem ipsum dolor. Odio pellentesque diam volutpat commodo sed egestas. Morbi tincidunt ornare massa eget egestas purus viverra accumsan in. Sit amet mattis vulputate enim nulla aliquet porttitor. Amet facilisis magna etiam tempor orci eu lobortis. Sapien eget mi proin sed libero. Id cursus metus aliquam eleifend mi. Sit amet mauris commodo quis imperdiet massa tincidunt. Iaculis eu non diam phasellus. Fames ac turpis egestas integer. Ac placerat vestibulum lectus mauris ultrices eros in cursus. Mus mauris vitae ultricies leo integer malesuada nunc. Sit amet nulla facilisi morbi tempus. Sit amet mauris commodo quis. Libero nunc consequat interdum varius sit amet mattis.

Turpis egestas integer eget aliquet nibh praesent tristique magna. Tellus rutrum tellus pellentesque eu tincidunt tortor aliquam nulla. Lacinia at quis risus sed. Malesuada fames ac turpis egestas sed tempus urna. Morbi tempus iaculis urna id volutpat lacus laoreet non. Sollicitudin aliquam ultrices sagittis orci a scelerisque purus. Fermentum posuere urna nec tincidunt praesent semper feugiat nibh sed. Non curabitur gravida arcu ac tortor dignissim convallis aenean. Arcu felis bibendum ut tristique et egestas. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Vulputate sapien nec sagittis aliquam. Eu turpis egestas pretium aenean pharetra magna ac. Eu turpis egestas pretium aenean pharetra. Volutpat sed cras ornare arcu dui vivamus arcu felis. Convallis posuere morbi leo urna molestie at. Sed vulputate mi sit amet. Mauris pellentesque pulvinar pellentesque habitant morbi tristique.

Sagittis orci a scelerisque purus semper eget. Nisl vel pretium lectus quam id leo in. Feugiat in fermentum posuere urna. Aliquet porttitor lacus luctus accumsan. Vitae purus faucibus ornare suspendisse sed nisi lacus sed. Elit eget gravida cum sociis natoque penatibus et magnis. Ac turpis egestas sed tempus urna et pharetra. Ut venenatis tellus in metus vulputate eu scelerisque felis imperdiet. Eleifend donec pretium vulputate sapien nec sagittis aliquam malesuada bibendum. In arcu cursus euismod quis viverra nibh. Dui nunc mattis enim ut. Arcu felis bibendum ut tristique et egestas quis ipsum. Elit scelerisque mauris pellentesque pulvinar pellentesque habitant morbi tristique.

Commodo nulla facilisi nullam vehicula ipsum a arcu cursus. Sit amet est placerat in. Viverra nam libero justo laoreet sit. Integer eget aliquet nibh praesent tristique magna sit amet purus. Venenatis a condimentum vitae sapien pellentesque habitant morbi tristique. Habitant morbi tristique senectus et netus et malesuada. Diam sit amet nisl suscipit adipiscing. Elit eget gravida cum sociis. Non arcu risus quis varius quam quisque. Tortor dignissim convallis aenean et tortor at risus viverra adipiscing. At augue eget arcu dictum varius duis at. Viverra nam libero justo laoreet. Nec tincidunt praesent semper feugiat nibh sed. Id semper risus in hendrerit gravida. Ultricies mi quis hendrerit dolor magna eget est lorem. Vulputate dignissim suspendisse in est ante in nibh. Velit euismod in pellentesque massa placerat duis. Et molestie ac feugiat sed lectus vestibulum mattis ullamcorper. Id eu nisl nunc mi ipsum faucibus vitae aliquet nec.", Style::default().fg(Color::Green).bg(Color::Black))),
];
    let hchunks = Layout::default()
        .direction(Direction::Horizontal)
        .margin(1)
        .constraints([Percentage(50), Percentage(50)].as_ref())
        .split(terminal.size()?);
    let vchunks0 = Layout::default()
        .direction(Direction::Vertical)
        .margin(1)
        .constraints([Percentage(30), Percentage(70)].as_ref())
        .split(hchunks[0]);
    let vchunks1 = Layout::default()
        .direction(Direction::Vertical)
        .margin(1)
        .constraints([Percentage(50), Percentage(50)].as_ref())
        .split(hchunks[1]);
    let parachunks = Layout::default()
        .direction(Direction::Vertical)
        .margin(1)
        .constraints([Percentage(10), Percentage(90)].as_ref())
        .split(vchunks0[1]);
    let dam_bar = BarChart::default()
        .block(
            Block::default()
                .title("Dam")
                .title_alignment(Center)
                .borders(Borders::ALL),
        )
        .bar_width(13)
        .bar_gap(1)
        .bar_style(Style::default().fg(Color::Green).bg(Color::Black))
        .value_style(Style::default().fg(Color::Red).bg(Color::Black))
        .data(&dam_data)
        .max(100);
    let silo_bar = BarChart::default()
        .block(
            Block::default()
                .title("Fuel Silo")
                .title_alignment(Center)
                .borders(Borders::ALL),
        )
        .bar_width(13)
        .bar_gap(1)
        .bar_style(Style::default().fg(Color::Green).bg(Color::Black))
        .value_style(Style::default().fg(Color::Red).bg(Color::Black))
        .data(&silo_data)
        .max(100);
    let sparkline = Sparkline::default()
        .block(
            Block::default()
                .title("Latency")
                .title_alignment(Center)
                .borders(Borders::ALL),
        )
        .data(&sparkline_data.time)
        .style(Style::default().fg(Color::Red).bg(Color::Black));
    let para = Paragraph::new(text)
        .block(
            Block::default()
                .title("Paragraph")
                .title_alignment(Center)
                .borders(Borders::ALL),
        )
        .style(Style::default().fg(Color::White).bg(Color::Black))
        .alignment(Center)
        .wrap(Wrap { trim: true });
    let para1 = Paragraph::new(text2)
        .alignment(Center)
        .wrap(Wrap { trim: true });
    terminal.draw(|f| {
        f.render_widget(dam_bar, vchunks1[0]);
        f.render_widget(silo_bar, vchunks1[1]);
        f.render_widget(sparkline, vchunks0[0]);
        f.render_widget(para, vchunks0[1]);
        f.render_widget(para1, parachunks[1]);
    })?;

    Ok(())
}

fn panic_fn() -> ! {
    crossterm::terminal::disable_raw_mode().unwrap();
    panic!("Unexpected error! Check the server.");
}
